/* ESQUEMA */
USE GD2C2016;
GO

CREATE SCHEMA FLOPANICMA AUTHORIZATION GD;
GO

/**************/
/* SECUENCIAS */
/**************/

CREATE SEQUENCE FLOPANICMA.AFILIADO_SEQ START WITH 100 INCREMENT BY 100;
CREATE SEQUENCE FLOPANICMA.MATRICULA_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FLOPANICMA.PERSONA_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE FLOPANICMA.ID_TURNO_SEQ AS INT START WITH 202164 INCREMENT BY 1;

/**********/
/* TABLAS */
/**********/

CREATE TABLE FLOPANICMA.PERSONA
(
		ID_PERSONA INT NOT NULL PRIMARY KEY,
		NOMBRE VARCHAR(255) NULL,
		APELLIDO VARCHAR(255) NULL,
		DIRECCION VARCHAR(255) NULL,
		TELEFONO NUMERIC(18,0) NULL,
		E_MAIL VARCHAR(255) NOT NULL DEFAULT 'SIN E-MAIL',
		F_NACIMIENTO DATETIME NULL,
		TIPO_DOCUMENTO VARCHAR(20) NOT NULL DEFAULT 'DNI',
		NRO_DOCUMENTO NUMERIC(18,0) NULL,
		SEXO VARCHAR(1) NULL,
);

CREATE TABLE FLOPANICMA.PROFESIONAL
(
		ID_PROFESIONAL INT NOT NULL PRIMARY KEY,
		MATRICULA INT NOT NULL,
		HORAS_ACUMULADAS INT NOT NULL DEFAULT 0,
		
		CONSTRAINT FK_PROFESIONAL_PERSONA FOREIGN KEY (ID_PROFESIONAL) REFERENCES FLOPANICMA.PERSONA(ID_PERSONA)
);

CREATE TABLE FLOPANICMA.TIPO_ESPECIALIDAD
(
		ID_TIPO_ESPECIALIDAD NUMERIC(18,0) NOT NULL PRIMARY KEY,
		DETALLE VARCHAR(255) NULL
);

CREATE TABLE FLOPANICMA.ESPECIALIDAD
(
		ID_ESPECIALIDAD NUMERIC(18,0) NOT NULL PRIMARY KEY,
		ID_TIPO_ESPECIALIDAD NUMERIC(18,0) NOT NULL,
		DETALLE VARCHAR(255) NULL,
		
		CONSTRAINT FK_ESPECIALIDAD_TIPO_ESPECIALIDAD FOREIGN KEY (ID_TIPO_ESPECIALIDAD) REFERENCES FLOPANICMA.TIPO_ESPECIALIDAD(ID_TIPO_ESPECIALIDAD)
);

CREATE TABLE FLOPANICMA.AGENDA
(		
		ID_PROFESIONAL INT NOT NULL,
		FECHA DATETIME NOT NULL,
		ID_ESPECIALIDAD NUMERIC (18,0),
		PERIODO_INICIO DATE NOT NULL,
		PERIODO_FIN DATE NOT NULL,
		
		CONSTRAINT PK_AGENDA PRIMARY KEY (ID_PROFESIONAL,FECHA,ID_ESPECIALIDAD,PERIODO_INICIO,PERIODO_FIN),
		CONSTRAINT FK_AGENDA_ESPECIALIDAD FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES FLOPANICMA.ESPECIALIDAD(ID_ESPECIALIDAD),
		CONSTRAINT FK_AGENDA_PROFESIONAL FOREIGN KEY (ID_PROFESIONAL) REFERENCES FLOPANICMA.PROFESIONAL(ID_PROFESIONAL)
);

CREATE TABLE FLOPANICMA.PLAN_MEDICO
(
		ID_PLAN NUMERIC(18,0) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255)NULL,
		CUOTA NUMERIC(18,0) NULL,
		COSTO_CONSULTA NUMERIC(18,0) NULL,
		COSTO_FARMACIA NUMERIC(18,0) NULL
);

CREATE TABLE FLOPANICMA.AFILIADO
(
		ID_AFILIADO INT NOT NULL PRIMARY KEY,
		NRO_AFILIADO INT NOT NULL,
		PLAN_MEDICO NUMERIC(18,0) NOT NULL,
		ACTIVO BIT NOT NULL DEFAULT 1,
		ESTADO_CIVIL VARCHAR(50) NOT NULL DEFAULT 'SOLTERO/A',
		CANTIDAD_HIJOS INT NOT NULL DEFAULT 0,
		NRO_CONSULTA INT NOT NULL DEFAULT 0, 
		
		CONSTRAINT FK_AFILIADO_PLAN_MEDICO FOREIGN KEY (PLAN_MEDICO) REFERENCES FLOPANICMA.PLAN_MEDICO(ID_PLAN),
		CONSTRAINT FK_AFILIADO_PERSONA FOREIGN KEY (ID_AFILIADO) REFERENCES FLOPANICMA.PERSONA(ID_PERSONA)
);

CREATE TABLE FLOPANICMA.COMPRA_BONO
(
		ID_OPERACION INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		ID_AFILIADO INT NOT NULL,
		CANTIDAD_BONOS INT DEFAULT 1,
		FECHA_COMPRA DATETIME NOT NULL,
		FECHA_IMPRESION DATETIME NOT NULL,
		IMPORTE_TOTAL NUMERIC (18,2),
		
		CONSTRAINT FK_COMPRA_BONO_AFILIADO FOREIGN KEY(ID_AFILIADO) REFERENCES FLOPANICMA.AFILIADO(ID_AFILIADO)
);

CREATE TABLE FLOPANICMA.BONO
(		
		ID_BONO INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		BONO_NRO NUMERIC(18,0) NULL,
		ID_OPERACION INT NOT NULL,
		PLAN_MEDICO NUMERIC(18,0) NOT NULL,
		NUMERO_AFILIADO INT NULL,
		
		
		CONSTRAINT FK_BONO_COMRA_BONO FOREIGN KEY (ID_OPERACION) REFERENCES FLOPANICMA.COMPRA_BONO(ID_OPERACION),
		CONSTRAINT FK_BONOS_PLAN_MEDICO FOREIGN KEY (PLAN_MEDICO) REFERENCES FLOPANICMA.PLAN_MEDICO(ID_PLAN)
);

CREATE TABLE FLOPANICMA.MODIFICACION
(
		ID_MODIFICACION INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		ID_AFILIADO INT NOT NULL,
		FECHA DATE NOT NULL,
		DETALLE VARCHAR(255) NOT NULL,
		PLAN_MEDICO_ANTERIOR NUMERIC(18,0) NOT NULL,
		
		CONSTRAINT FK_MODIFICACIONES_AFILIADO FOREIGN KEY (ID_AFILIADO) REFERENCES FLOPANICMA.AFILIADO(ID_AFILIADO),
		CONSTRAINT FK_MODIFICACIONES_PLAN_MEDICO FOREIGN KEY (PLAN_MEDICO_ANTERIOR) REFERENCES FLOPANICMA.PLAN_MEDICO(ID_PLAN)
);

CREATE TABLE FLOPANICMA.ESPECIALIDAD_PROFESIONAL
(
		ID_PROFESIONAL INT NOT NULL,
		ID_ESPECIALIDAD NUMERIC(18,0) NOT NULL,
		
		CONSTRAINT PK_ESPECIALIDAD_PROFESIONAL PRIMARY KEY (ID_PROFESIONAL,ID_ESPECIALIDAD),
		CONSTRAINT FK_ESPECIALIDAD_PROFESIONAL_ESPECIALIDAD FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES FLOPANICMA.ESPECIALIDAD(ID_ESPECIALIDAD),
		CONSTRAINT FK_ESPECIALIDAD_PROFESIONAL_PROFESIONAL FOREIGN KEY (ID_PROFESIONAL) REFERENCES FLOPANICMA.PROFESIONAL(ID_PROFESIONAL)
);

CREATE TABLE FLOPANICMA.PEDIDO_TURNO
(
		ID_TURNO NUMERIC(18,0) NOT NULL PRIMARY KEY,
		FECHA DATETIME NOT NULL,
		ID_PROFESIONAL INT NOT NULL,
		ID_AFILIADO INT NOT NULL,
		ID_ESPECIALIDAD NUMERIC(18,0) NOT NULL,
		
		
		--FALTA CONSTRAINT PARA EVITAR PEDIDOS A MAS DE UN DOCTOR Y DE UN DOCTOR A VARIOS PACIENTES
		CONSTRAINT FK_PEDIDO_TURNO_ESPECIALIDAD FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES FLOPANICMA.ESPECIALIDAD(ID_ESPECIALIDAD),
		CONSTRAINT FK_PEDIDO_TURNO_PROFESIONAL FOREIGN KEY (ID_PROFESIONAL) REFERENCES FLOPANICMA.PROFESIONAL(ID_PROFESIONAL),
		CONSTRAINT FK_PEDIDO_TURNO_AFILIADO FOREIGN KEY (ID_AFILIADO) REFERENCES FLOPANICMA.AFILIADO(ID_AFILIADO),
);

CREATE TABLE FLOPANICMA.TIPO_CANCELACION
(
		ID_TIPO_CANCELACION INT IDENTITY (1,1) NOT NULL PRIMARY KEY,
		DETALLE VARCHAR(255) NULL
);

CREATE TABLE FLOPANICMA.CANCELACION
(
		ID_TURNO_CANCELADO NUMERIC(18,0) NOT NULL PRIMARY KEY,
		COD_TIPO_CANCELACION INT NOT NULL,
		MOTIVO VARCHAR(255) NOT NULL DEFAULT 'CANCELACIÓN GENÉRICA'
		
		CONSTRAINT FK_CANCELACION_PEDIDO_TURNO FOREIGN KEY (ID_TURNO_CANCELADO) REFERENCES FLOPANICMA.PEDIDO_TURNO(ID_TURNO),
		CONSTRAINT FK_CANCELACION_TIPO_CANCELACION FOREIGN KEY (COD_TIPO_CANCELACION) REFERENCES FLOPANICMA.TIPO_CANCELACION(ID_TIPO_CANCELACION)
);

CREATE TABLE FLOPANICMA.CONSULTA
(
		ID_CONSULTA INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		ID_TURNO NUMERIC(18,0) NOT NULL,
		ID_BONO INT NOT NULL,
		BONO_NRO NUMERIC(18,0) NOT NULL,
		SINTOMA VARCHAR(255) NULL,
		DIAGNOSTICO VARCHAR(255) NULL,
		REGISTRO_LLEGADA DATETIME NOT NULL,
		REGISTRO_ATENCION DATETIME NULL,
		
		CONSTRAINT FK_CONSULTA_BONO FOREIGN KEY(ID_BONO)REFERENCES FLOPANICMA.BONO(ID_BONO),
		CONSTRAINT FK_CONSULTA_PEDIDO_TURNO FOREIGN KEY (ID_TURNO)REFERENCES FLOPANICMA.PEDIDO_TURNO(ID_TURNO)
);

CREATE TABLE FLOPANICMA.FUNCIONALIDAD
(
		ID_FUNCIONALIDAD INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255),
);


CREATE TABLE FLOPANICMA.ROL
(
		ID_ROL INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255) NULL,
		ACTIVO BIT NOT NULL
);

CREATE TABLE FLOPANICMA.USUARIO
(
		ID_USUARIO INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		ID_PERSONA INT NOT NULL,
		USERNAME VARCHAR(255) NOT NULL,
		PASSWORD NVARCHAR(255) NOT NULL,
		INTENTOS INT NOT NULL DEFAULT 0,
		ACTIVO BIT NOT NULL DEFAULT 1,
		
		CONSTRAINT FK_USUARIO_PERSONA FOREIGN KEY(ID_PERSONA) REFERENCES FLOPANICMA.PERSONA(ID_PERSONA)
);

CREATE TABLE FLOPANICMA.USUARIO_ROL
(
		ID_USUARIO INT NOT NULL,
		ID_ROL INT NOT NULL,
		
		CONSTRAINT PK_USUARIO_ROL PRIMARY KEY (ID_USUARIO,ID_ROL),
		CONSTRAINT FK_USUARIO_ROL_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES FLOPANICMA.USUARIO(ID_USUARIO),
		CONSTRAINT FK_USUARIO_ROL_ROL FOREIGN KEY (ID_ROL) REFERENCES FLOPANICMA.ROL(ID_ROL)
);

CREATE TABLE FLOPANICMA.ROL_FUNCIONALIDAD
(
		ID_ROL INT NOT NULL,
		ID_FUNCIONALIDAD INT NOT NULL,
		
		CONSTRAINT PK_ROL_FUNCIONALIDAD PRIMARY KEY (ID_ROL,ID_FUNCIONALIDAD),
		CONSTRAINT FK_ROL_FUNCIONALIDAD_ROL FOREIGN KEY (ID_ROL) REFERENCES FLOPANICMA.ROL(ID_ROL),
		CONSTRAINT FK_ROL_FUNCIONALIDAD_FUNCIONALIDAD FOREIGN KEY (ID_FUNCIONALIDAD) REFERENCES FLOPANICMA.FUNCIONALIDAD(ID_FUNCIONALIDAD)
);


/***********/
/* INDICES */
/***********/
CREATE UNIQUE INDEX NRO_DOCUMENTO_IND1 ON FLOPANICMA.PERSONA(NRO_DOCUMENTO);
CREATE UNIQUE INDEX USUARIO_IND1 ON FLOPANICMA.USUARIO(USERNAME);

/***********************/
/*      FUNCIONES      */
/***********************/
GO

CREATE FUNCTION FLOPANICMA.PASSWORD_HASH(@PASSWORD NVARCHAR(255))
	RETURNS NVARCHAR(255)
	
	BEGIN
		RETURN HASHBYTES('SHA2_256',@PASSWORD)
	END;

GO

CREATE FUNCTION FLOPANICMA.TRIM(@STRING VARCHAR(255))
	RETURNS VARCHAR(255)

	BEGIN
		RETURN LTRIM(RTRIM(@STRING))
	END;

GO

CREATE FUNCTION FLOPANICMA.TURNOS_HORA(@HORA_INICIO TIME,@HORA_FIN TIME)
	RETURNS INT
	
	BEGIN
		DECLARE @CANT_TURNOS INT;
		
		SET @CANT_TURNOS = DATEDIFF(MI,@HORA_INICIO,@HORA_FIN)/30
		
		RETURN @CANT_TURNOS
	END;

GO

CREATE FUNCTION FLOPANICMA.HORARIO_ASIGNADO(@ID_PROFESIONAL INT,@FECHA DATETIME)
	RETURNS BIT
	
	BEGIN
		DECLARE @CONT INT = 0;
		
		SET @CONT = (SELECT COUNT(*) FROM FLOPANICMA.AGENDA 
					WHERE ID_PROFESIONAL= @ID_PROFESIONAL AND FECHA = @FECHA);

		IF @CONT <> 0
			RETURN 1

		RETURN 0
	END;

GO
	
CREATE FUNCTION FLOPANICMA.LIMITE_HORAS_SEMANALES(@ID_PROFESIONAL INT, @TURNOS INT, @FECHA DATETIME)

	RETURNS BIT
	
	BEGIN
		DECLARE @FECHA_LUNES DATETIME;
		DECLARE @FECHA_SABADO DATETIME;
		DECLARE @HORAS_ACUMULADAS FLOAT;
		
		SET @FECHA_LUNES = DATEADD(WK,DATEDIFF(WK,0,GETDATE()),0)
		SET @FECHA_SABADO = DATEADD(DAY,5,@FECHA_LUNES)
		
		SET @HORAS_ACUMULADAS = (SELECT SUM(0.5) FROM FLOPANICMA.AGENDA WHERE ID_PROFESIONAL = @ID_PROFESIONAL
								AND FECHA >=@FECHA_LUNES AND FECHA<=@FECHA_SABADO) + (@TURNOS * 0.5)
								
		IF @HORAS_ACUMULADAS > 48
			RETURN 1
		
		RETURN 0
	END;
GO

/************/
/* MIGRADOR */
/************/
GO

/*INSERTAR DATOS FIJOS*/
CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_INSERT_DATOS_FIJOS
AS
BEGIN
	
	/*FLOPANICMA.ROL*/
	INSERT INTO FLOPANICMA.ROL(DESCRIPCION,ACTIVO)
	VALUES
	('ADMINISTRATIVO',1),
	('PROFESIONAL',1),
	('AFILIADO',1),
	('ADMINISTRADOR GENERAL',1);
	
	/*FLOPANICMA.FUNCIONALIDAD*/
	INSERT INTO FLOPANICMA.FUNCIONALIDAD(DESCRIPCION)
	VALUES
	('ABM DE AFILIADO'),
	('ABM DE ESPECIALIDADES MEDICAS'),
	('ABM DE PLANES MEDICOS'),
	('ABM DE PROFESIONAL'),
	('ABM DE ROL'),
	('CANCELAR ATENCION'),
	('COMPRA DE BONOS'),
	('LISTADOS'),
	('PEDIR TURNO'),
	('REGISTRAR AGENDA PROFESIONAL'),
	('REGISTRAR LLEGADA'),
	('REGISTRAR RESULTADO'),
	('LISTADO');
	
	/*FLOPLANICMA.ROL_FUNCIONALIDAD*/
	DECLARE @ID_ROL INT;
	DECLARE @ID_USUARIO INT;
	
	/*FUNCIONALIDADES DEL ROL ADMINISTRATIVO*/
	SELECT @ID_ROL = ID_ROL FROM FLOPANICMA.ROL WHERE DESCRIPCION='ADMINISTRATIVO';
	INSERT INTO FLOPANICMA.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION = 'ABM DE AFILIADO')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION = 'ABM DE ESPECIALIDADES MEDICAS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE PLANES MEDICOS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE PROFESIONAL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE ROL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR LLEGADA'));
	
	/*FUNCIONALIDADES DEL ROL AFILIADO*/
	SELECT @ID_ROL = ID_ROL FROM FLOPANICMA.ROL WHERE DESCRIPCION='AFILIADO';
	INSERT INTO FLOPANICMA.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='CANCELAR ATENCION')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='COMPRA DE BONOS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='PEDIR TURNO'));
	
	/*FUNCIONALIDADES DEL ROL PROFESIONAL*/
	SELECT @ID_ROL = ID_ROL FROM FLOPANICMA.ROL WHERE DESCRIPCION='PROFESIONAL';
	INSERT INTO FLOPANICMA.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR AGENDA PROFESIONAL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='CANCELAR ATENCION')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR RESULTADO'));
	
	/*FUNCIONALIDADES DEL ROL ADMINISTRADOR GENERAL*/
	SELECT @ID_ROL = ID_ROL FROM FLOPANICMA.ROL WHERE DESCRIPCION='ADMINISTRADOR GENERAL';
	INSERT INTO FLOPANICMA.ROL_FUNCIONALIDAD(ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION = 'ABM DE AFILIADO')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION = 'ABM DE ESPECIALIDADES MEDICAS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE PLANES MEDICOS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE PROFESIONAL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='ABM DE ROL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR LLEGADA')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='CANCELAR ATENCION')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='COMPRA DE BONOS')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='PEDIR TURNO')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR AGENDA PROFESIONAL')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='REGISTRAR RESULTADO')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM FLOPANICMA.FUNCIONALIDAD WHERE DESCRIPCION ='LISTADO'));
	
	/*FLOPANICMA.TIPO_CANCELACION*/
	INSERT INTO FLOPANICMA.TIPO_CANCELACION(DETALLE)
	VALUES
	('CANCELACION DEL PACIENTE'),
	('CANCELACION DEL PROFESIONAL UN PERIODO'),
	('CANCELACION DEL PROFESIONAL DIA ENTERO'),
	('CANCELACION AFILIADO DADO DE BAJA');
	
	/*USUARIOS ADMINISTRATIVOS (FUNCIONALIDADES CORRESPONDIENTRES PARA ROL ADMINISTRATIVO*/
	INSERT INTO FLOPANICMA.PERSONA (ID_PERSONA,NOMBRE,NRO_DOCUMENTO)
	VALUES (NEXT VALUE FOR FLOPANICMA.PERSONA_SEQ,'ADMINISTRATIVO 1',32947431);
	
	INSERT INTO FLOPANICMA.USUARIO (ID_PERSONA,USERNAME,PASSWORD)
	VALUES ((SELECT ID_PERSONA FROM FLOPANICMA.PERSONA WHERE NOMBRE='ADMINISTRATIVO 1'),'NICO',FLOPANICMA.PASSWORD_HASH('W23E'));
	
	SELECT @ID_USUARIO = ID_USUARIO
	FROM FLOPANICMA.USUARIO
	WHERE USERNAME='NICO'
	
	INSERT INTO USUARIO_ROL
	VALUES (@ID_USUARIO,1)
	
	/*USUARIO ADMINISTRADOR (TODAS LAS FUNCIONALIDADES)*/
		
	INSERT INTO FLOPANICMA.PERSONA (ID_PERSONA,NOMBRE)
	VALUES (0,'ADMINISTRADOR GENERAL');
	
	INSERT INTO FLOPANICMA.USUARIO (ID_PERSONA,USERNAME,PASSWORD)
	VALUES (0,'ADMIN',FLOPANICMA.PASSWORD_HASH('W23E'));
	
	SELECT @ID_USUARIO=ID_USUARIO
	FROM FLOPANICMA.USUARIO 
	WHERE USERNAME = 'ADMIN';
		
	INSERT INTO USUARIO_ROL
	VALUES (@ID_USUARIO,@ID_ROL);

END;

GO

EXEC FLOPANICMA.SP_MIGRACION_INSERT_DATOS_FIJOS;

GO

/*MIGRAR AFILIADOS Y PLANES MEDICOS*/

CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_AFILIADOS
AS
BEGIN
	DECLARE @MIGRA_AFILIADO_PLAN_MEDICO TABLE
	(
		NRO_DOCUMENTO NUMERIC(18,0) NULL,
		NOMBRE VARCHAR(255) NULL,
		APELLIDO VARCHAR(255) NULL,
		DIRECCION VARCHAR(255) NULL,
		TELEFONO NUMERIC(18,0) NULL,
		E_MAIL VARCHAR(255) NOT NULL DEFAULT 'SIN E-MAIL',
		F_NACIMIENTO DATETIME NULL,
		TIPO_DOCUMENTO VARCHAR(20) NOT NULL DEFAULT 'DNI',
		ID_PLAN NUMERIC(18,0) NULL,
		DESCRIPCION VARCHAR (255) NULL,
		CUOTA NUMERIC(4,2) NULL,
		COSTO_CONSULTA NUMERIC(18,0) NULL,
		COSTO_FARMACIA NUMERIC(18,0) NULL
	);
		
	INSERT INTO @MIGRA_AFILIADO_PLAN_MEDICO
	(NRO_DOCUMENTO,NOMBRE,APELLIDO,DIRECCION,TELEFONO,E_MAIL,F_NACIMIENTO,ID_PLAN,DESCRIPCION,COSTO_CONSULTA,COSTO_FARMACIA)
	SELECT DISTINCT (PACIENTE_DNI),PACIENTE_NOMBRE,PACIENTE_APELLIDO,PACIENTE_DIRECCION,PACIENTE_TELEFONO,PACIENTE_MAIL,
			PACIENTE_FECHA_NAC,PLAN_MED_CODIGO,PLAN_MED_DESCRIPCION,PLAN_MED_PRECIO_BONO_CONSULTA,PLAN_MED_PRECIO_BONO_FARMACIA
	FROM GD_ESQUEMA.MAESTRA
	WHERE PACIENTE_DNI IS NOT NULL;
	
	INSERT INTO FLOPANICMA.PLAN_MEDICO
	(ID_PLAN,DESCRIPCION,COSTO_CONSULTA,COSTO_FARMACIA)
	SELECT DISTINCT (ID_PLAN),DESCRIPCION,COSTO_CONSULTA,COSTO_FARMACIA
	FROM @MIGRA_AFILIADO_PLAN_MEDICO;
	
	INSERT INTO FLOPANICMA.PERSONA
	(ID_PERSONA,NOMBRE,APELLIDO,DIRECCION,TELEFONO,E_MAIL,F_NACIMIENTO,NRO_DOCUMENTO)
	SELECT NEXT VALUE FOR FLOPANICMA.PERSONA_SEQ,NOMBRE,APELLIDO,DIRECCION,TELEFONO,E_MAIL,F_NACIMIENTO,NRO_DOCUMENTO 
	FROM @MIGRA_AFILIADO_PLAN_MEDICO;
	
	INSERT INTO FLOPANICMA.AFILIADO 
	(NRO_AFILIADO,PLAN_MEDICO,ID_AFILIADO)
	SELECT ((NEXT VALUE FOR FLOPANICMA.AFILIADO_SEQ) + 1), ID_PLAN,
		   (SELECT ID_PERSONA FROM FLOPANICMA.PERSONA AS PERSTAB WHERE PERSTAB.NRO_DOCUMENTO=VARTAB.NRO_DOCUMENTO)
	FROM @MIGRA_AFILIADO_PLAN_MEDICO AS VARTAB;
	
	/*USUARIO AFILIADO (FUNCIONALIDADES CORRESPONDIENTES AL ROL AFILIADO)*/
	
	INSERT INTO FLOPANICMA.USUARIO
	(ID_PERSONA,USERNAME,PASSWORD)
	VALUES (4400,'AFIL1',FLOPANICMA.PASSWORD_HASH('W23E'));
	
	INSERT INTO FLOPANICMA.USUARIO_ROL
	(ID_USUARIO,ID_ROL)
	VALUES ((SELECT ID_USUARIO FROM FLOPANICMA.USUARIO WHERE USERNAME = 'AFIL1'),3);
	
END;
GO

EXEC FLOPANICMA.SP_MIGRACION_AFILIADOS;
		
GO

/*MIGRAR PROFESIONALES*/

CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_PROFESIONALES
AS
BEGIN
	
	DECLARE @MIGRA_PROFESIONAL TABLE
	(
		NOMBRE VARCHAR(255),
		APELLIDO VARCHAR(255),
		NRO_DOCUMENTO NUMERIC(18,0),
		DIRECCION VARCHAR(255),
		TELEFONO NUMERIC(18,0),
		E_MAIL VARCHAR(255),
		F_NACIMIENTO DATETIME
	);
	
	INSERT INTO @MIGRA_PROFESIONAL
	(NRO_DOCUMENTO,NOMBRE,APELLIDO,DIRECCION,TELEFONO,E_MAIL,F_NACIMIENTO)
	SELECT DISTINCT(MEDICO_DNI),MEDICO_NOMBRE,MEDICO_APELLIDO,MEDICO_DIRECCION,MEDICO_TELEFONO,MEDICO_MAIL,MEDICO_FECHA_NAC
	FROM GD_ESQUEMA.MAESTRA
	WHERE MEDICO_DNI IS NOT NULL;
	
	INSERT INTO FLOPANICMA.PERSONA
	(ID_PERSONA,NOMBRE,APELLIDO,DIRECCION,NRO_DOCUMENTO,TELEFONO,E_MAIL,F_NACIMIENTO)
	SELECT (NEXT VALUE FOR FLOPANICMA.PERSONA_SEQ), NOMBRE,APELLIDO,DIRECCION,NRO_DOCUMENTO,TELEFONO,E_MAIL,F_NACIMIENTO
	FROM @MIGRA_PROFESIONAL;
	
	INSERT INTO FLOPANICMA.PROFESIONAL
	(ID_PROFESIONAL,MATRICULA,HORAS_ACUMULADAS)
	SELECT (SELECT ID_PERSONA FROM FLOPANICMA.PERSONA AS PERSTAB WHERE PERSTAB.NRO_DOCUMENTO=VARTAB.NRO_DOCUMENTO),
			(NEXT VALUE FOR FLOPANICMA.MATRICULA_SEQ),40
	FROM @MIGRA_PROFESIONAL AS VARTAB;
	
	/*USUARIO PROFESIONAL (FUNCIONALIDADES CORRESPONDIENTES AL ROL PROFESIONAL)*/
	
	INSERT INTO FLOPANICMA.USUARIO
	(ID_PERSONA,USERNAME,PASSWORD)
	VALUES (5555,'PROF1',FLOPANICMA.PASSWORD_HASH('W23E'));
	
	INSERT INTO FLOPANICMA.USUARIO_ROL
	(ID_USUARIO,ID_ROL)
	VALUES ((SELECT ID_USUARIO FROM FLOPANICMA.USUARIO WHERE USERNAME = 'PROF1'),2);
	
END;

GO

EXEC FLOPANICMA.SP_MIGRACION_PROFESIONALES

GO

/*MIGRAR ESPECIALIDADES, TIPOS DE ESPECIALIDAD Y ESPECIALIDAD_PROFESIONAL*/

CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_ESPECIALIDADES
AS
BEGIN
	DECLARE @MIGRA_ESPECIALIDADES TABLE
	(
		ID_ESPECIALIDAD NUMERIC(18,0),
		ESP_DETALLE VARCHAR(255),
		ID_TIPO_ESPECIALIDAD NUMERIC(18,0),
		TIPO_ESP_DETALLE VARCHAR(255)
	);
	
	INSERT INTO @MIGRA_ESPECIALIDADES
	(ID_ESPECIALIDAD,ESP_DETALLE,ID_TIPO_ESPECIALIDAD,TIPO_ESP_DETALLE)
	SELECT DISTINCT(ESPECIALIDAD_CODIGO),ESPECIALIDAD_DESCRIPCION,TIPO_ESPECIALIDAD_CODIGO,TIPO_ESPECIALIDAD_DESCRIPCION
	FROM GD_ESQUEMA.MAESTRA;

	INSERT INTO FLOPANICMA.TIPO_ESPECIALIDAD
	(ID_TIPO_ESPECIALIDAD,DETALLE)
	SELECT DISTINCT(ID_TIPO_ESPECIALIDAD),TIPO_ESP_DETALLE
	FROM @MIGRA_ESPECIALIDADES
	WHERE ID_TIPO_ESPECIALIDAD IS NOT NULL;
	
	INSERT INTO FLOPANICMA.ESPECIALIDAD
	(ID_ESPECIALIDAD,ID_TIPO_ESPECIALIDAD,DETALLE)
	SELECT DISTINCT(ID_ESPECIALIDAD),ID_TIPO_ESPECIALIDAD,ESP_DETALLE
	FROM @MIGRA_ESPECIALIDADES
	WHERE ID_ESPECIALIDAD IS NOT NULL;
	
	INSERT INTO FLOPANICMA.ESPECIALIDAD_PROFESIONAL
	(ID_PROFESIONAL,ID_ESPECIALIDAD)
	SELECT DISTINCT FLOPANICMA.PROFESIONAL.ID_PROFESIONAL,GD_ESQUEMA.MAESTRA.ESPECIALIDAD_CODIGO
	FROM FLOPANICMA.PERSONA JOIN
         FLOPANICMA.PROFESIONAL ON FLOPANICMA.PERSONA.ID_PERSONA = FLOPANICMA.PROFESIONAL.ID_PROFESIONAL JOIN
         GD_ESQUEMA.MAESTRA ON FLOPANICMA.PERSONA.NRO_DOCUMENTO = GD_ESQUEMA.MAESTRA.MEDICO_DNI;
END;

GO

EXEC FLOPANICMA.SP_MIGRACION_ESPECIALIDADES;

GO


/*MIGRAR CONSULTAS, BONOS Y COMPRA DE BONOS*/

CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_CONSULTAS_BONOS
AS
BEGIN
	DECLARE @MIGRA_CONSULTAS TABLE
	(
		ID_AFILIADO INT,
		ID_PROFESIONAL INT,
		ID_ESPECIALIDAD NUMERIC(18,0),
		FECHA_TURNO DATETIME,
		NRO_TURNO NUMERIC(18,0),
		FECHA_COMPRA DATETIME,
		FECHA_IMPRESION DATETIME,
		BONO_NUMERO NUMERIC (18,0),
		SINTOMA VARCHAR (255),
		ENFERMEDAD VARCHAR (255)
	);
	
	DECLARE @CB TABLE
	(
		ID_OPERACION INT IDENTITY(1,1),
		ID_AFILIADO INT,
		NRO_BONO NUMERIC(18,0),
		FECHA_COMPRA DATETIME,
		FECHA_IMPRESION DATETIME
	);
	
	DECLARE @CANTIDAD_CONSULTAS TABLE
	(
		AFILIADO NUMERIC (18,0),
		CANTIDAD INT
	);
	
	INSERT INTO @MIGRA_CONSULTAS
	(ID_AFILIADO,ID_PROFESIONAL,ID_ESPECIALIDAD,FECHA_TURNO,NRO_TURNO,FECHA_COMPRA,FECHA_IMPRESION,SINTOMA,ENFERMEDAD,BONO_NUMERO)
	SELECT (SELECT ID_PERSONA FROM FLOPANICMA.PERSONA AS PERTAB WHERE PERTAB.NRO_DOCUMENTO=GD_ESQUEMA.MAESTRA.PACIENTE_DNI),
	        (SELECT ID_PERSONA FROM FLOPANICMA.PERSONA AS PERTAB WHERE PERTAB.NRO_DOCUMENTO=GD_ESQUEMA.MAESTRA.MEDICO_DNI),
			ESPECIALIDAD_CODIGO,TURNO_FECHA,TURNO_NUMERO,COMPRA_BONO_FECHA,BONO_CONSULTA_FECHA_IMPRESION,
			CONSULTA_SINTOMAS,CONSULTA_ENFERMEDADES,BONO_CONSULTA_NUMERO 
	FROM GD_ESQUEMA.MAESTRA;
	
	INSERT INTO FLOPANICMA.PEDIDO_TURNO
	(ID_TURNO,FECHA,ID_PROFESIONAL,ID_AFILIADO,ID_ESPECIALIDAD)
	SELECT NRO_TURNO,FECHA_TURNO,ID_PROFESIONAL,ID_AFILIADO,ID_ESPECIALIDAD
	FROM @MIGRA_CONSULTAS
	WHERE (SINTOMA IS NULL AND FECHA_COMPRA IS NULL AND NRO_TURNO IS NOT NULL);
	
	INSERT INTO @CB
	(ID_AFILIADO,NRO_BONO,FECHA_COMPRA,FECHA_IMPRESION)
	SELECT ID_AFILIADO,BONO_NUMERO,FECHA_COMPRA,FECHA_IMPRESION
	FROM @MIGRA_CONSULTAS AS MIGCON
	WHERE MIGCON.FECHA_TURNO IS NULL;
	
	INSERT INTO FLOPANICMA.COMPRA_BONO
	(ID_AFILIADO,FECHA_COMPRA,FECHA_IMPRESION)
	SELECT ID_AFILIADO,FECHA_COMPRA,FECHA_IMPRESION
	FROM @CB;
	
	INSERT INTO FLOPANICMA.BONO
	(ID_OPERACION, PLAN_MEDICO,NUMERO_AFILIADO,BONO_NRO)
	SELECT ID_OPERACION,PLAN_MEDICO,NRO_AFILIADO,NRO_BONO
	FROM @CB AS CB JOIN FLOPANICMA.AFILIADO AS AFITAB ON CB.ID_AFILIADO = AFITAB.ID_AFILIADO;
	
	INSERT INTO FLOPANICMA.CONSULTA
	(ID_BONO,ID_TURNO,BONO_NRO,SINTOMA,DIAGNOSTICO,REGISTRO_LLEGADA,REGISTRO_ATENCION)
	SELECT (SELECT ID_BONO FROM FLOPANICMA.BONO BONOTAB WHERE MIGCON.BONO_NUMERO = BONOTAB.BONO_NRO), NRO_TURNO,BONO_NUMERO,SINTOMA,ENFERMEDAD,FECHA_TURNO,FECHA_TURNO
	FROM @MIGRA_CONSULTAS AS MIGCON
	WHERE FECHA_COMPRA IS NULL AND FECHA_IMPRESION IS NOT NULL
		
	INSERT INTO @CANTIDAD_CONSULTAS
	(AFILIADO,CANTIDAD)
	SELECT DISTINCT(ID_AFILIADO),COUNT(CONTAB.ID_TURNO)
	FROM FLOPANICMA.CONSULTA AS CONTAB JOIN FLOPANICMA.PEDIDO_TURNO AS PEDTAB ON CONTAB.ID_TURNO = PEDTAB.ID_TURNO
	GROUP BY (ID_AFILIADO);
	
	UPDATE FLOPANICMA.AFILIADO
	SET NRO_CONSULTA = (SELECT CANTIDAD FROM @CANTIDAD_CONSULTAS WHERE ID_AFILIADO = AFILIADO);
	
END;
GO

EXEC FLOPANICMA.SP_MIGRACION_CONSULTAS_BONOS

GO

CREATE PROCEDURE FLOPANICMA.SP_MIGRACION_AGENDA
AS
BEGIN
		
	INSERT INTO FLOPANICMA.AGENDA
	(ID_PROFESIONAL,FECHA,ID_ESPECIALIDAD,PERIODO_INICIO,PERIODO_FIN)
	SELECT DISTINCT PROTAB.ID_PROFESIONAL,FECHA,ESPTAB.ID_ESPECIALIDAD,'2015-01-01','2015-12-30'
	FROM FLOPANICMA.PROFESIONAL AS PROTAB JOIN 
		 FLOPANICMA.ESPECIALIDAD_PROFESIONAL AS ESPTAB ON PROTAB.ID_PROFESIONAL = ESPTAB.ID_PROFESIONAL JOIN
		 FLOPANICMA.PEDIDO_TURNO AS TURNOTAB ON ESPTAB.ID_PROFESIONAL = TURNOTAB.ID_PROFESIONAL;
	
END;

GO

EXEC FLOPANICMA.SP_MIGRACION_AGENDA;

GO

/***********/
/* TRIGGERS */
/***********/
 CREATE TRIGGER FLOPANICMA.TG_AFILIADO_BAJA ON FLOPANICMA.AFILIADO FOR UPDATE
AS 
IF UPDATE(ACTIVO)
 BEGIN TRANSACTION

 DECLARE @AFILIADO int;

SELECT @AFILIADO=ID_AFILIADO FROM INSERTED;
print @AFILIADO;

 /* inserta la modificación como "BAJA AFILIADO" en modificacion */
	INSERT INTO FLOPANICMA.MODIFICACION
	(ID_AFILIADO,FECHA,DETALLE,PLAN_MEDICO_ANTERIOR)
	SELECT @AFILIADO,GETDATE(),'BAJA AFILIADO',PLAN_MEDICO
	FROM INSERTED;
	/* Cancela los turnos de PEDIDO_TURNO que NO hayan sido tomados donde la FECHA es mayor a hoy */
	INSERT INTO FLOPANICMA.CANCELACION
	(ID_TURNO_CANCELADO,COD_TIPO_CANCELACION,MOTIVO)
	SELECT ID_TURNO, 4, 'CANCELACION POR BAJA DE AFILIADO' FROM FLOPANICMA.PEDIDO_TURNO
	WHERE CONVERT(DATE,FECHA) > GETDATE() AND ID_AFILIADO=@AFILIADO AND
	ID_TURNO NOT IN 
	(SELECT ID_TURNO FROM FLOPANICMA.CONSULTA WHERE REGISTRO_LLEGADA != NULL);

COMMIT

 GO  

 
 CREATE TRIGGER FLOPANICMA.TG_GENERAR_BONOS ON FLOPANICMA.COMPRA_BONO FOR INSERT
 AS
 BEGIN TRANSACTION
	DECLARE @NRO_AFILIADO INT;
	DECLARE @CANTIDAD INT;
	DECLARE @ID_AFILIADO INT;
	DECLARE @PLAN_MEDICO NUMERIC(18,0);
	
	SET @ID_AFILIADO = (SELECT ID_AFILIADO FROM INSERTED);
	
	SET @NRO_AFILIADO = (SELECT NRO_AFILIADO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_AFILIADO); 
	
	SET @CANTIDAD = (SELECT CANTIDAD_BONOS FROM INSERTED);
	
	SET @PLAN_MEDICO=(SELECT PLAN_MEDICO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO=@ID_AFILIADO);

	WHILE @CANTIDAD >0
	BEGIN
		INSERT INTO FLOPANICMA.BONO
		(ID_OPERACION,PLAN_MEDICO,NUMERO_AFILIADO)
		SELECT ID_OPERACION,@PLAN_MEDICO,@NRO_AFILIADO
		FROM INSERTED;
		SET @CANTIDAD = @CANTIDAD - 1;
	END

COMMIT

GO

CREATE TRIGGER FLOPANICMA.TG_QUITAR_ROL_INACTIVO_USUARIOS ON FLOPANICMA.ROL
FOR UPDATE
AS
IF UPDATE(ACTIVO)
BEGIN TRANSACTION
	DELETE USUARIO_ROL
	FROM FLOPANICMA.USUARIO_ROL USUARIO_ROL
	INNER JOIN FLOPANICMA.ROL ROL
		ON ROL.ID_ROL = USUARIO_ROL.ID_ROL
	AND ROL.ACTIVO = 0;
COMMIT

GO

/******************/
/* ABMS Y FILTROS */
/******************/

/*VALIDA EL USUARIO Y SU CONTRASEÑA VERIFICANDO QUE SE HAYAN CARGADO LOS DATOS E INHABILITANDO
 AL USUARIO SI SUPERA LOS TRES INTENTOS ERRONEOS DE CONTRASEÑA*/
 
CREATE PROCEDURE FLOPANICMA.LOGIN_USUARIO
@USERNAME VARCHAR(255),
@PASSWORD NVARCHAR(255),
@ID_USUARIO INT OUTPUT,
@ID_ERROR BIT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT

AS
BEGIN
	
	DECLARE @INTENTOS INT;
	DECLARE @HASH_PASS NVARCHAR(255);
	
	SET @ID_ERROR=0;
	SET @DESC_ERROR='';
	SET @ID_USUARIO=0;
	
	SET @USERNAME = FLOPANICMA.TRIM(UPPER(@USERNAME));
	
	IF (@USERNAME IS NULL OR @USERNAME='')
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'DEBE INGRESAR UN USUARIO';
		RETURN;
	END
	
	IF ((SELECT ID_USUARIO FROM FLOPANICMA.USUARIO AS USERTAB WHERE USERTAB.USERNAME = @USERNAME) IS NULL)
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'EL USUARIO INGRESADO NO EXISTE';
		RETURN;
	END
	
	IF ((SELECT ACTIVO FROM FLOPANICMA.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME) = 0)
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'ESTE USUARIO SE ENCUENTRA BLOQUEADO. CONTACTE A UN ADMINISTRADOR';
		RETURN;
	END
	
	SET @HASH_PASS = FLOPANICMA.PASSWORD_HASH(@PASSWORD);
	
	IF ((SELECT PASSWORD FROM FLOPANICMA.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME)<>@HASH_PASS)
	  BEGIN
		  SET @ID_ERROR = 1;
		  SET @DESC_ERROR = 'LA CONSTRASEÑA INGRESADA ES INCORRECTA';
		
		  SELECT @INTENTOS = INTENTOS FROM FLOPANICMA.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME;
		  SET @INTENTOS = @INTENTOS +1;
		  
		  UPDATE FLOPANICMA.USUARIO
		  SET INTENTOS = @INTENTOS
		  WHERE USERNAME= @USERNAME;
	  END
	 ELSE
	  BEGIN
		    SELECT @ID_USUARIO = ID_USUARIO FROM FLOPANICMA.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME;

			UPDATE FLOPANICMA.USUARIO
			SET INTENTOS = 0
			WHERE USERNAME = @USERNAME;
			RETURN;
	  END
	
	IF (@INTENTOS = 3)
		BEGIN
			SET @DESC_ERROR = 'LA CONTRASEÑA INGRESADA ES INCORRECTA. USUARIO BLOQUEADO';
			
			UPDATE FLOPANICMA.USUARIO
			SET ACTIVO = 0
			WHERE USERNAME=@USERNAME;
			RETURN;
		END
	
	RETURN;
END;

GO

/*ASIGNAR ROLES POR USUARIO*/

CREATE PROCEDURE FLOPANICMA.GET_ROLES_POR_USUARIO 
@USERNAME VARCHAR(255),
@ID_ERROR INT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT
AS
BEGIN
	DECLARE @CANTIDAD INT;

	SELECT @ID_ERROR = 0;
	SELECT @DESC_ERROR = '';

	SELECT @USERNAME = FLOPANICMA.TRIM(UPPER(@USERNAME));

	SELECT @CANTIDAD = COUNT(*) FROM FLOPANICMA.USUARIO
	WHERE USERNAME = @USERNAME;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'EL USUARIO INGRESADO NO EXISTE.';
		RETURN;
	END	

	SELECT @CANTIDAD = COUNT(*) FROM FLOPANICMA.USUARIO_ROL UR, FLOPANICMA.USUARIO U
	WHERE U.ID_USUARIO = UR.ID_USUARIO
	AND U.USERNAME = @USERNAME;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'EL USUARIO INGRESADO NO TIENE ROLES ASOCIADOS.';
		RETURN;
	END	

	SELECT R.ID_ROL, R.DESCRIPCION, R.ACTIVO 
	FROM FLOPANICMA.USUARIO_ROL UR, FLOPANICMA.USUARIO U, FLOPANICMA.ROL R
	WHERE U.ID_USUARIO = UR.ID_USUARIO
	AND R.ID_ROL = UR.ID_ROL
	AND U.USERNAME = @USERNAME;

END;

GO

/*RECUPERAR FUNCIONALIDADES DE LOS ROLES*/

CREATE PROCEDURE FLOPANICMA.GET_FUNCIONALIDADES_POR_ROL 
@DESCRIPCION VARCHAR(50),
@ID_ERROR INT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT
AS
BEGIN
	DECLARE @CANTIDAD INT;

	SELECT @ID_ERROR = 0;
	SELECT @DESC_ERROR = '';

	SELECT @DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESCRIPCION));

	SELECT @CANTIDAD = COUNT(*) FROM FLOPANICMA.ROL
	WHERE DESCRIPCION = @DESCRIPCION;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'EL ROL INGRESADO NO EXISTE.';
		RETURN;
	END	

	SELECT @CANTIDAD = COUNT(*) FROM FLOPANICMA.ROL_FUNCIONALIDAD RF, FLOPANICMA.ROL R
	WHERE R.ID_ROL = RF.ID_ROL
	AND R.DESCRIPCION = @DESCRIPCION;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'EL ROL SELECCIONADO NO TIENE FUNCIONALIDADES ASOCIADAS.';
		RETURN;
	END	

	SELECT F.ID_FUNCIONALIDAD, F.DESCRIPCION 
	FROM FLOPANICMA.FUNCIONALIDAD F, FLOPANICMA.ROL_FUNCIONALIDAD RF, FLOPANICMA.ROL R
	WHERE R.ID_ROL = RF.ID_ROL
	AND RF.ID_FUNCIONALIDAD = F.ID_FUNCIONALIDAD
	AND R.DESCRIPCION = @DESCRIPCION;
END;
GO

/*MODIFICAR PLAN DE UN AFILIADO*/
CREATE PROCEDURE FLOPANICMA.SP_AFILIADO_MODIFICACION
@USERNAME_ID INT,
@DIRECCION VARCHAR(255),
@TELEFONO NUMERIC(18,0),
@E_MAIL VARCHAR(255),
@ESTADO_CIVIL VARCHAR(50),
@CANT_HIJOS INT,
@PLAN_MEDICO_ANTERIOR NUMERIC(18,0),
@PLAN_MEDICO_NUEVO NUMERIC(18,0),
@DETALLE VARCHAR(255),

@ID_ERROR INT= 0 OUTPUT,
@DESC_ERROR VARCHAR(255)= '' OUTPUT

AS
BEGIN
	DECLARE @FECHA_ACTUAL DATE;
	SELECT @FECHA_ACTUAL = GETDATE();

	IF(@USERNAME_ID IS NULL)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'Error. Usuario inexistente';
		RETURN;
	END
	ELSE
	BEGIN
		/* Actualizamos tabla de AFILIADO */
		UPDATE FLOPANICMA.AFILIADO
		SET PLAN_MEDICO=@PLAN_MEDICO_NUEVO,ESTADO_CIVIL=@ESTADO_CIVIL, 

CANTIDAD_HIJOS=@CANT_HIJOS
		WHERE ID_AFILIADO=@USERNAME_ID;

		/* Cambiar tambien en PERSONA */
		UPDATE FLOPANICMA.PERSONA
		SET DIRECCION=@DIRECCION,TELEFONO=@TELEFONO, E_MAIL=@E_MAIL
		WHERE ID_PERSONA=@USERNAME_ID;

		/* Si se cambio el PLAN, se toma nota de la modificacion en MODIFICACION*/
		IF(@PLAN_MEDICO_NUEVO != @PLAN_MEDICO_ANTERIOR)
		BEGIN
		INSERT INTO FLOPANICMA.MODIFICACION
		VALUES (@USERNAME_ID,GETDATE(),@DETALLE,@PLAN_MEDICO_ANTERIOR);
		END
		RETURN;
	END

END;
GO


  /*BAJA DE UN AFILIADO*/

CREATE PROCEDURE FLOPANICMA.SP_AFILIADO_BAJA
@USERNAME_ID INT,
@ACTIVO_ANTERIOR BIT,
@ACTIVO_NUEVO BIT,

@ID_ERROR INT= 0 OUTPUT,
@DESC_ERROR VARCHAR(255)= '' OUTPUT

AS
BEGIN
	DECLARE @FECHA_ACTUAL DATE;

	SELECT @DESC_ERROR = '';
	SELECT @FECHA_ACTUAL = GETDATE();

	IF (@ACTIVO_NUEVO IS NULL)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'No se ingresó estado para el afiliado';
		RETURN;
	END	
	ELSE
	BEGIN
		IF (@ACTIVO_ANTERIOR = 1)
		BEGIN
		/* Actualizamos tabla de AFILIADO el ACTIVO en false */
		UPDATE FLOPANICMA.AFILIADO
		SET ACTIVO=@ACTIVO_NUEVO
		WHERE ID_AFILIADO=@USERNAME_ID;
		RETURN;
		END
	END

END;
GO

 
CREATE PROCEDURE FLOPANICMA.SP_ABM_ROL_ALTA
@DESC_ROL VARCHAR(255),
@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT
AS
BEGIN
	--VALIDACIONES--
	IF(@DESC_ROL IS NULL) OR (@DESC_ROL = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'DEBE INGRESAR UN NOMBRE PARA EL ROL A CREAR';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF((SELECT COUNT(1) FROM FLOPANICMA.ROL AS ROL WHERE ROL.DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_ROL))) > 0) -- VALIDA QUE EL ROL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL ROL INGRESADO YA EXISTE';
		RETURN
	END 
	ELSE
	BEGIN
		INSERT INTO FLOPANICMA.ROL (DESCRIPCION, ACTIVO) VALUES (@DESC_ROL,1);
		SET @MENSAJE = 'EL ROL "' + @DESC_ROL + '" SE HA GUARDADO CORRECTAMENTE';
	END
END
GO

CREATE PROCEDURE FLOPANICMA.GET_ROLES_POR_DESCRIPCION(@DESCRIPCION_ROL VARCHAR(50))
AS
BEGIN
	IF(@DESCRIPCION_ROL IS NULL)
	BEGIN
		SET @DESCRIPCION_ROL = '';
	END
	
	SET @DESCRIPCION_ROL = FLOPANICMA.TRIM(@DESCRIPCION_ROL);

	SELECT R.ID_ROL, R.DESCRIPCION, R.ACTIVO
	FROM FLOPANICMA.ROL R
	WHERE R.DESCRIPCION LIKE '%'+@DESCRIPCION_ROL+'%';
END
GO

/* GET_ALL_FUNCIONALIDADES */

CREATE PROCEDURE FLOPANICMA.GET_ALL_FUNCIONALIDADES 
AS
BEGIN
	SELECT F.ID_FUNCIONALIDAD, F.DESCRIPCION 
	FROM FLOPANICMA.FUNCIONALIDAD F;
END
GO


/* PERMITE AGREGAR UNA FUNCIONALIDAD DEFINIDA A UN ROL EXISTENTE. 
  (LLAMAMOS A ESTE PROCEDIMIENTO DESDE LA SECCION DE "MODIFICACION" DE LA APLICACION.
   CREA UN NUEVO REGISTRO EN LA TABLA ASOCIATIVA FLOPANICMA.ROL_FUNCIONALIDAD) */

CREATE PROCEDURE FLOPANICMA.SP_ABM_ROL_AGREGAR_FUNCIONALIDAD
@DESC_ROL VARCHAR(255),
@DESC_FUNCIONALIDAD VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @ID_ROL INT;
	DECLARE @ID_FUNCIONALIDAD INT;
	
	--VALIDACIONES--
	SELECT @ID_ROL = ROL.ID_ROL -- BUSCA EL ROL POR SU DESCRIPCION EN LA BASE
	FROM FLOPANICMA.ROL AS ROL 
	WHERE ROL.DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_ROL));
	
	IF(@ID_ROL IS NULL) -- EN CASO DE QUE SE ESTE QUERIENDO AGREGAR UNA FUNCIONALIDAD A UN ROL INEXISTENTE CORTA LA EJECUCION Y DEVUELVE UN MENSAJE DE ERROR 
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL ROL ESPECIFICADO NO EXISTE';
		RETURN
	END
	
	SELECT @ID_FUNCIONALIDAD = FUNCIONALIDAD.ID_FUNCIONALIDAD -- IDEM PARA FUNCIONALIDAD
	FROM FLOPANICMA.FUNCIONALIDAD AS FUNCIONALIDAD
	WHERE FUNCIONALIDAD.DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_FUNCIONALIDAD));
	
	IF(@ID_FUNCIONALIDAD IS NULL) OR (@DESC_FUNCIONALIDAD = '')
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'LA FUNCIONALIDAD ESPECIFICADA NO EXISTE';
		RETURN
	END

	--PROCEDIMIENTO--
	IF EXISTS(SELECT  1 
				  FROM FLOPANICMA.ROL_FUNCIONALIDAD AS ROL_FUNCIONALIDAD 
				  WHERE (ROL_FUNCIONALIDAD.ID_ROL = @ID_ROL) AND (ROL_FUNCIONALIDAD.ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD)) -- VALIDA QUE LA NUEVA FUNCIONALIDAD NO HAYA SIDO ANTERIORMENTE ASIGNADA AL ROL
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'LA FUNCIONALIDAD "' + @DESC_FUNCIONALIDAD + '" YA HA SIDO ANTERIORMENTE ASIGNADA AL ROL "' + @DESC_ROL + '".';
		RETURN
	END
	ELSE
	BEGIN
		INSERT INTO FLOPANICMA.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD) VALUES (@ID_ROL,@ID_FUNCIONALIDAD);
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'LA FUNCIONALIDAD "' + @DESC_FUNCIONALIDAD + '" HA SIDO ASIGNADA CORRECTAMENTE AL ROL "' + @DESC_ROL + '".';
	END
END
GO


/* PERMITE QUITAR UNA FUNCIONALIDAD DEFINIDA A UN ROL EXISTENTE. 
  (LLAMAMOS A ESTE PROCEDIMIENTO DESDE LA SECCION DE "MODIFICACION" DE LA APLICACION.
   ELIMINA UN REGISTRO DE LA TABLA ASOCIATIVA FLOPANICMA.ROL_FUNCIONALIDAD) */
 
CREATE PROCEDURE FLOPANICMA.SP_ABM_ROL_QUITAR_FUNCIONALIDAD
@DESC_ROL VARCHAR(255),
@DESC_FUNCIONALIDAD VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @ID_ROL INT;
	DECLARE @ID_FUNCIONALIDAD VARCHAR(255);
	
	--VALIDACIONES--
	SELECT @ID_ROL = ID_ROL
	FROM FLOPANICMA.ROL AS ROL
	WHERE ROL.DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_ROL));
	
	IF(@ID_ROL IS NULL) -- VALIDA QUE EXISTA EL ROL AL QUE LE QUIERO QUITAR LA FUNCIONALIDAD
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL ROL ESPECIFICADO NO EXISTE';
		RETURN
	END
	
	SELECT @ID_FUNCIONALIDAD = ID_FUNCIONALIDAD
	FROM FLOPANICMA.FUNCIONALIDAD AS FUNCIONALIDAD
	WHERE FUNCIONALIDAD.DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_FUNCIONALIDAD));
	
	IF(@ID_FUNCIONALIDAD IS NULL) -- IDEM PARA FUNCIONALIDAD
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'LA FUNCIONALIDAD ESPECIFICADA NO EXISTE';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF EXISTS(SELECT 1 
			  FROM FLOPANICMA.ROL_FUNCIONALIDAD AS ROL_FUNCIONALIDAD 
			  WHERE (ROL_FUNCIONALIDAD.ID_ROL = @ID_ROL) AND (ROL_FUNCIONALIDAD.ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD))
	BEGIN		  
		DELETE FROM FLOPANICMA.ROL_FUNCIONALIDAD WHERE (ID_ROL = @ID_ROL) AND (ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD);
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'LA FUNCIONALIDAD SE HA QUITADO EXITOSAMENTE.';
	END
	ELSE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'LA FUNCIONALIDAD QUE DESEA QUITAR NO SE ENCUENTRA ASIGNADA AL ROL ESPECIFICADO.'
	END	
END
GO



/* PERMITE MODIFICAR EL NOMBRE O EL ESTADO DE UN ROL EXISTENTE
   (PUEDO CAMBIAR EL NOMBRE Y VOLVER A HABILITAR EL ESTADO DE ROL) */
   
CREATE PROCEDURE FLOPANICMA.SP_ABM_ROL_MODIFICAR_NOMBRE
@ID_ROL INT,
@DESC_ROL VARCHAR(255),
@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(1) FROM
	FLOPANICMA.ROL AS ROL 
	WHERE ROL.ID_ROL = @ID_ROL;

	IF(@ID_ROL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL ROL QUE DESEA MODIFICAR NO EXISTE.';
		RETURN
	END
	
	IF (@DESC_ROL IS NULL) OR (@DESC_ROL = '') -- EVITO QUE GUARDE EN LA BASE UNA DESCRIPCION "NULL" O UNA PALABRA VACIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'DEBE INGRESAR UN NOMBRE PARA MODIFICAR.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	UPDATE FLOPANICMA.ROL -- MODIFICO EL NOMBRE DEL ROL
	SET DESCRIPCION = FLOPANICMA.TRIM(UPPER(@DESC_ROL))
	WHERE ID_ROL = @ID_ROL;
	
	SET @MENSAJE = ('EL ROL "' + @DESC_ROL + '" SE HA GUARDADO CORRECTAMENTE.');
END
GO

CREATE PROCEDURE FLOPANICMA.SP_ABM_ROL_ACTIVAR_DESACTIVAR
@ID_ROL INT,
@ACTIVO BIT,
@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(1) FROM
	FLOPANICMA.ROL AS ROL 
	WHERE ROL.ID_ROL = @ID_ROL;
	
	IF(@ID_ROL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL ROL QUE DESEA ELIMINAR NO EXISTE.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF(@ACTIVO = 1)
		UPDATE FLOPANICMA.ROL 
		SET ACTIVO = 0 
		WHERE ID_ROL = @ID_ROL;
	ELSE
		UPDATE FLOPANICMA.ROL
		SET ACTIVO = 1
		WHERE ID_ROL = @ID_ROL;
END
GO


/*PERMITE REGISTRAR LA COMPRA DE N BONOS
(SE UTILIZA ESTE PROCEDIMIENTO DESDE EL MENU COMPRA BONO, QUE ESTA HABILITADO PARA LOS USUARIOS DEL 
ROL AFILIADO Y ADMINISTRATIVO, RECORDAR QUE EL AFILIADO PUEDE COMPRAR LOS BONOS EN EL MOSTRADOR Y LE 
CORRESPONDE AL ADMINISTRATIVO REGISTRAR DICHA COMPRA.*/
CREATE PROCEDURE FLOPANICMA.SP_COMPRA_BONOS
@CANTIDAD INT,
@ID_AFILIADO INT,
@IMPORTE NUMERIC(10,2) OUTPUT,
@FLAG_ERROR BIT= 0,
@MENSAJE VARCHAR(255) = ''
AS

BEGIN

IF @CANTIDAD <=0
	BEGIN 
		SET @FLAG_ERROR = 1
		SET @MENSAJE = 'SE DEBE COMPRAR AL MENOS UN BONO'
		RETURN;
	END;

IF (SELECT COUNT(ID_AFILIADO) FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO= @ID_AFILIADO AND ACTIVO=1)=0
	BEGIN
		SET @FLAG_ERROR=1
		SET @MENSAJE = 'NO SE ENCUENTRA NINGUN AFILIADO O EL MISMO NO ESTA ACTIVO'

		RETURN;
	END;

	

DECLARE @FECHA DATETIME;
SET @FECHA = GETDATE(); --PARA NO COMPLICAR LA VIDA LA FECHA DE COMPRA Y DE IMPRESION ES LA MISMA. ESPECIFICAR EN LA ESTRATEGIA

SET @IMPORTE = ((SELECT COSTO_CONSULTA FROM FLOPANICMA.PLAN_MEDICO 
				 WHERE ID_PLAN = (SELECT PLAN_MEDICO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_AFILIADO))*@CANTIDAD);
				 
INSERT INTO FLOPANICMA.COMPRA_BONO
(ID_AFILIADO,CANTIDAD_BONOS,FECHA_COMPRA,FECHA_IMPRESION,IMPORTE_TOTAL)
VALUES (@ID_AFILIADO,@CANTIDAD,@FECHA,@FECHA,@IMPORTE);

END;

GO

/*PERMITE REGISTAR LA AGENDA DEL PROFESIONAL SIN EXCEDER EL LIMITE DE HORAS SEMANALES NI PISAR OTRA ACTIVIDAD*/
CREATE PROCEDURE FLOPANICMA.SP_REGISTRAR_AGENDA

 @ID_PROFESIONAL INT,
 @DIA VARCHAR(10),
 @ID_ESPECIALIDAD NUMERIC (18,0),
 @HORA_INICIO TIME(0),
 @HORA_FIN TIME(0),
 @PERIODO_INICIO DATE,
 @PERIODO_FIN DATE,
 @FLAG_ERROR INT OUTPUT,
 @MENSAJE VARCHAR(255) OUTPUT

AS

BEGIN TRANSACTION T1
	
	DECLARE @TURNOS_AGREGADOS INT;
	DECLARE @FECHA DATETIME =@PERIODO_INICIO;
	
	
	SET @FECHA = DATEADD(HOUR,DATEPART(HH,@HORA_INICIO),@FECHA)
	
	IF (CONVERT(VARCHAR(5),@HORA_INICIO) >= (CONVERT(VARCHAR(5),@HORA_FIN)))
		BEGIN
			ROLLBACK TRANSACTION T1;
			SET @FLAG_ERROR = 1
			SET @MENSAJE = 'LOS HORARIOS ELEGIDOS NO SON VALIDOS O ESTAN INVERTIDOS'
			RETURN;
		END;
	
	IF (UPPER(@DIA))= 'DOMINGO'
		BEGIN
			ROLLBACK TRANSACTION T1;
			SET @FLAG_ERROR = 1
			SET @MENSAJE = 'DOMINGO NO ES UN DIA VALIDO'
			RETURN;
		END;
	
	IF (UPPER(@DIA) = 'SÁBADO') AND ((@HORA_INICIO < '10:00:00') OR (@HORA_FIN >'15:00:00'))
		BEGIN
			ROLLBACK TRANSACTION T1;
			SET @FLAG_ERROR = 1
			SET @MENSAJE = 'EL HORARIO ELEGIDO ESTA EN UN RANGO NO VALIDO'
			RETURN;
		END;
		
	IF (@HORA_INICIO < '07:00:00') OR (@HORA_FIN > '20:00:00')
		BEGIN
			ROLLBACK TRANSACTION T1;
			SET @FLAG_ERROR = 1
			SET @MENSAJE = 'EL HORARIO ELEGIDO ESTA EN UN RANGO NO VALIDO'
			RETURN;
		END;
		
	WHILE UPPER(DATENAME(DW,@FECHA))<>UPPER(@DIA) AND @FECHA<@PERIODO_FIN
		BEGIN
			SET @FECHA= DATEADD(DAY,1,@FECHA)
		END;
		
	IF CONVERT(DATE,@FECHA)=@PERIODO_FIN
		BEGIN
			ROLLBACK TRANSACTION T1;
			SET @FLAG_ERROR = 1
			SET @MENSAJE = 'EL DIA SELECCIONADO: ' + @DIA + ' NO ES VALIDO'
			RETURN;
		END;

	WHILE @FECHA <= @PERIODO_FIN
		BEGIN
	
		IF (FLOPANICMA.HORARIO_ASIGNADO(@ID_PROFESIONAL,@FECHA)) = 1
			BEGIN
				ROLLBACK TRANSACTION T1;
				SET @FLAG_ERROR = 1
				SET @MENSAJE = 'EL HORARIO/FECHA ELEGIDO YA TIENEN ACTIVIDAD ASIGNADA'
				RETURN;
			END;
		
		SET @TURNOS_AGREGADOS = FLOPANICMA.TURNOS_HORA(@HORA_INICIO,@HORA_FIN)

		IF (FLOPANICMA.LIMITE_HORAS_SEMANALES(@ID_PROFESIONAL,@TURNOS_AGREGADOS,@FECHA))=1
			BEGIN
				ROLLBACK TRANSACTION T1;
				SET @FLAG_ERROR = 1
				SET @MENSAJE = 'EL TIEMPO DE ACTIVIDAD ACUMULADO SUPERA LAS 48 HS'
				RETURN;
			END;

		WHILE @TURNOS_AGREGADOS > 0
			BEGIN
				INSERT INTO FLOPANICMA.AGENDA
				(ID_PROFESIONAL,FECHA,ID_ESPECIALIDAD,PERIODO_INICIO,PERIODO_FIN)
				VALUES(@ID_PROFESIONAL,DATEADD(MINUTE,(30*(@TURNOS_AGREGADOS-1)),@FECHA),@ID_ESPECIALIDAD,
					  @PERIODO_INICIO,@PERIODO_FIN);
				SET @TURNOS_AGREGADOS = @TURNOS_AGREGADOS-1
			END;
		SET @FECHA = DATEADD(DAY,7,@FECHA)
	END;
	
	SET @FLAG_ERROR = 0
	SET @MENSAJE = 'La actividad ha sido registrada en la agenda'
	 	
	
COMMIT

GO 

CREATE PROCEDURE FLOPANICMA.GET_FECHAS_DISPONIBLES_AGENDA_PROFESIONAL
@ID_PROFESIONAL INT
AS
BEGIN
	SELECT * FROM FLOPANICMA.AGENDA AG 
	WHERE (ID_PROFESIONAL = @ID_PROFESIONAL)
	AND AG.FECHA NOT IN (SELECT PE.FECHA  
						 FROM FLOPANICMA.PEDIDO_TURNO PE 
						 LEFT JOIN (SELECT CA.ID_TURNO_CANCELADO 
									FROM FLOPANICMA.CANCELACION CA 
									WHERE COD_TIPO_CANCELACION = 1 
									OR COD_TIPO_CANCELACION = 4) AS CAN	 
						 ON PE.ID_TURNO = CAN.ID_TURNO_CANCELADO 
						 WHERE CAN.ID_TURNO_CANCELADO IS  NULL AND ID_PROFESIONAL = @ID_PROFESIONAL);
END
GO

CREATE PROCEDURE FLOPANICMA.SP_REGISTRAR_PEDIDO_TURNO
@FECHA DATETIME,
@ID_PROFESIONAL INT,
@ID_AFILIADO INT,
@ID_ESPECIALIDAD NUMERIC(18,0)
AS
BEGIN
	INSERT INTO FLOPANICMA.PEDIDO_TURNO 
	(ID_TURNO,FECHA,ID_PROFESIONAL,ID_AFILIADO,ID_ESPECIALIDAD) 
	VALUES (NEXT VALUE FOR FLOPANICMA.ID_TURNO_SEQ,@FECHA,@ID_PROFESIONAL,@ID_AFILIADO,@ID_ESPECIALIDAD);
END
GO
	
CREATE PROCEDURE FLOPANICMA.GET_PROFESIONALES_POR_ESPECIALIDAD
@DETALLE_ESPECIALIDAD VARCHAR(255)
AS
BEGIN
	IF(@DETALLE_ESPECIALIDAD IS  NULL)
	BEGIN
		SET @DETALLE_ESPECIALIDAD = '';
	END
	
	SELECT ESP.DETALLE, PERS.NOMBRE, PERS.APELLIDO
	FROM FLOPANICMA.PROFESIONAL AS PROF
	INNER JOIN FLOPANICMA.ESPECIALIDAD_PROFESIONAL AS EP 
		ON (EP.ID_PROFESIONAL = PROF.ID_PROFESIONAL)
	INNER JOIN FLOPANICMA.ESPECIALIDAD AS ESP
		ON (EP.ID_ESPECIALIDAD = ESP.ID_ESPECIALIDAD)
	INNER JOIN FLOPANICMA.PERSONA AS PERS
		ON (EP.ID_PROFESIONAL = PERS.ID_PERSONA)
	WHERE ESP.DETALLE LIKE '%' + FLOPANICMA.TRIM(@DETALLE_ESPECIALIDAD) + '%';
END
GO

/* CANCELACION TURNO AFILIADO O PROFESIONAL*/
CREATE PROCEDURE FLOPANICMA.SP_CANCELACION_TURNO
@ID_PERSONA INT,
@ID_TURNO NUMERIC(18,0),
@FECHA_TURNO DATE,
@FECHA_UNICA_PROF DATE,
@FECHA_INICIAL_PROF DATE,
@FECHA_FIN_PROF DATE,
@DETALLE VARCHAR(255),

@ID_ERROR INT= 0 OUTPUT,
@DESC_ERROR VARCHAR(255)= '' OUTPUT

AS

BEGIN

	/* si es AFILIADO trabajar con el ID_TURNO y FECHA_TURNO */
	IF (EXISTS(SELECT * FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_PERSONA))
	BEGIN
	SELECT @FECHA_TURNO = FECHA FROM PEDIDO_TURNO WHERE ID_TURNO = @ID_TURNO;

		/* AFILIADO. Verifica que haya mas de un dia de antelación */
		IF (@FECHA_TURNO <= GETDATE())
		BEGIN
			SELECT @ID_ERROR = 1;
			SELECT @DESC_ERROR = 'El turno no se puede cancelar, no se cuenta con la suficiente antelación';
			RETURN;
		END
		ELSE
		BEGIN
		/* Hacer la cancelacion de parte del Afiliado */
			INSERT INTO FLOPANICMA.CANCELACION
			(ID_TURNO_CANCELADO,COD_TIPO_CANCELACION,MOTIVO)
			SELECT ped.ID_TURNO, 1, @DETALLE FROM FLOPANICMA.PEDIDO_TURNO AS ped INNER JOIN
			FLOPANICMA.CONSULTA con ON	ped.ID_TURNO = con.ID_TURNO
			AND ped.ID_TURNO=@ID_TURNO AND con.REGISTRO_LLEGADA IS NULL;
			RETURN;
		END/* fin desp de validar fecha turno */

	END/* fin IF ppal Afiliado/Profesional*/
	ELSE
	BEGIN
	/* caso en el que es un PROFESIONAL*/
		/* caso en el que pone el DIA a cancelar */
		IF (@FECHA_UNICA_PROF IS NOT NULL)
		BEGIN
		/* verifica que la fecha unica sea VALIDA y hace la cancelacion de turnoS */
			IF (@FECHA_UNICA_PROF <= GETDATE()) /* no es valida */
			BEGIN
			SELECT @ID_ERROR = 1;
			SELECT @DESC_ERROR = 'El turno no se puede cancelar, no se cuenta con la suficiente antelación';
			END
			ELSE /* es valida */
			BEGIN
			PRINT 'Cancela un PROFESIONAL un dia ENTERO';
			INSERT INTO FLOPANICMA.CANCELACION
			(ID_TURNO_CANCELADO,COD_TIPO_CANCELACION,MOTIVO)
				SELECT ped.ID_TURNO, 3, @DETALLE FROM FLOPANICMA.PEDIDO_TURNO AS ped INNER JOIN 
				FLOPANICMA.CONSULTA con ON	ped.ID_TURNO = con.ID_TURNO
				WHERE ped.ID_PROFESIONAL = @ID_PERSONA AND CONVERT(DATE,ped.FECHA) = @FECHA_UNICA_PROF
				AND con.REGISTRO_LLEGADA IS NULL;
			END
		END
		ELSE
		BEGIN
		/* si la fecha UNICA de PROF es vacia, se entiende que pasó fecha DESDE-HASTA */
			IF (@FECHA_INICIAL_PROF <= GETDATE())
			BEGIN
				SELECT @ID_ERROR = 2;
				SELECT @DESC_ERROR = 'La fecha inicial de la cancelación no cuenta con la suficiente antelación';
				RETURN;
			END
			ELSE
			BEGIN /* Cancela PROFESIONAL por periodo DESDE-HASTA */
			INSERT INTO FLOPANICMA.CANCELACION
			(ID_TURNO_CANCELADO,COD_TIPO_CANCELACION,MOTIVO)
				SELECT ped.ID_TURNO, 2, @DETALLE FROM FLOPANICMA.PEDIDO_TURNO AS ped INNER JOIN 
				FLOPANICMA.CONSULTA con ON	ped.ID_TURNO = con.ID_TURNO
				WHERE ped.ID_PROFESIONAL = @ID_PERSONA AND CONVERT(DATE,ped.FECHA) >= @FECHA_INICIAL_PROF AND 
				CONVERT(DATE,ped.FECHA) <= @FECHA_FIN_PROF
				AND con.REGISTRO_LLEGADA IS NULL;
			END
		END
	END
	
END;

GO

CREATE PROCEDURE FLOPANICMA.SP_GET_AFILIADO_PARA_MODIF
@NRO_AFILIADO INT,

@ID_ERROR INT= 0 OUTPUT,
@DESC_ERROR VARCHAR(255)= '' OUTPUT

AS
BEGIN

	IF(@NRO_AFILIADO IS NULL)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'NO INGRESÓ NINGÚN NRO DE AFILIADO. REINTENTE.';
	END
	ELSE
	BEGIN
		SELECT PER.ID_PERSONA,PER.NOMBRE, PER.APELLIDO, PER.NRO_DOCUMENTO, PER.F_NACIMIENTO, 
		PER.DIRECCION, PER.TELEFONO, PER.E_MAIL,
		(SELECT PL.DESCRIPCION FROM FLOPANICMA.PLAN_MEDICO PL WHERE PL.ID_PLAN=AFI.PLAN_MEDICO),
		PER.SEXO, AFI.ESTADO_CIVIL
		FROM FLOPANICMA.PERSONA AS PER LEFT JOIN FLOPANICMA.AFILIADO AS AFI ON
		PER.ID_PERSONA=AFI.ID_AFILIADO
	END

END;
GO			

CREATE PROCEDURE FLOPANICMA.SP_LEST_ESP_MAS_CANCELADAS
@ANIO INT,
@SEMESTRE INT,
@MES INT

AS
BEGIN
	IF(@SEMESTRE =1)
	BEGIN
		SELECT TOP 5 COUNT(DISTINCT PED.ID_TURNO) CANT_TURNOS, PED.ID_ESPECIALIDAD 
		FROM FLOPANICMA.PEDIDO_TURNO PED INNER JOIN FLOPANICMA.CANCELACION CAN ON PED.ID_TURNO = CAN.ID_TURNO_CANCELADO
		WHERE YEAR(PED.FECHA)=@ANIO AND (MONTH(PED.FECHA)<7 OR MONTH(PED.FECHA)=@MES) AND PED.FECHA<GETDATE()
		GROUP BY PED.ID_ESPECIALIDAD
		ORDER BY CANT_TURNOS DESC
	END
	ELSE
	BEGIN
		IF(@SEMESTRE =2)
		BEGIN
			SELECT TOP 5 COUNT(DISTINCT PED.ID_TURNO) CANT_TURNOS, PED.ID_ESPECIALIDAD 
			FROM FLOPANICMA.PEDIDO_TURNO PED INNER JOIN FLOPANICMA.CANCELACION CAN ON PED.ID_TURNO = CAN.ID_TURNO_CANCELADO
			WHERE YEAR(PED.FECHA)=@ANIO AND (MONTH(PED.FECHA)>=7 OR MONTH(PED.FECHA)=@MES) AND PED.FECHA<GETDATE()
			GROUP BY PED.ID_ESPECIALIDAD
			ORDER BY CANT_TURNOS DESC
		END
		ELSE
		BEGIN
			SELECT TOP 5 COUNT(DISTINCT PED.ID_TURNO) CANT_TURNOS, PED.ID_ESPECIALIDAD 
			FROM FLOPANICMA.PEDIDO_TURNO PED INNER JOIN FLOPANICMA.CANCELACION CAN ON PED.ID_TURNO = CAN.ID_TURNO_CANCELADO
			WHERE YEAR(PED.FECHA)=@ANIO AND PED.FECHA<GETDATE()
			GROUP BY PED.ID_ESPECIALIDAD
			ORDER BY CANT_TURNOS DESC
		END
	END
END;
GO	


CREATE PROCEDURE FLOPANICMA.SP_REGISTRAR_LLEGADA_ATENCION_MEDICA
@ID_AFILIADO INT,
@ID_PROFESIONAL INT,
@ID_TURNO INT,
@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT
AS
BEGIN TRANSACTION
	--DECLARACIONES--
	DECLARE @ACTIVO BIT;
	DECLARE @BONOS_DISPONIBLES INT;
	DECLARE @ID_BONO INT;
	DECLARE @NRO_AFILIADO INT;
	DECLARE @NRO_CONSULTA INT;
	DECLARE @PLAN_MEDICO NUMERIC(18,0);
	
	SELECT @ACTIVO = ACTIVO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_AFILIADO;
		
	--VALIDACIONES--
	IF(@ACTIVO = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL AFILIADO SE ENCUENTRA INACTIVO';
		RETURN
	END
	
	SELECT @PLAN_MEDICO = PLAN_MEDICO FROM FLOPANICMA.AFILIADO A WHERE A.ID_AFILIADO = @ID_AFILIADO;
	
	SELECT @BONOS_DISPONIBLES = COUNT(1) 
	FROM FLOPANICMA.BONO 
	WHERE (ABS(NUMERO_AFILIADO - (SELECT NRO_AFILIADO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_AFILIADO)) <= 99)
	AND BONO_NRO IS NULL
	AND PLAN_MEDICO = @PLAN_MEDICO;
	
	IF(@BONOS_DISPONIBLES = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL AFILIADO NO DISPONE DE BONOS';
		RETURN
	END
	
	SELECT TOP 1 @ID_BONO = ID_BONO 
	FROM FLOPANICMA.BONO 
	WHERE (ABS(NUMERO_AFILIADO - (SELECT NRO_AFILIADO FROM FLOPANICMA.AFILIADO WHERE ID_AFILIADO = @ID_AFILIADO)) <= 99)
	AND BONO_NRO IS NULL
	AND PLAN_MEDICO = @PLAN_MEDICO;
	
	SELECT @NRO_AFILIADO = NRO_AFILIADO , @NRO_CONSULTA = NRO_CONSULTA 
	FROM FLOPANICMA.AFILIADO 
	WHERE ID_AFILIADO = @ID_AFILIADO;
	
	--PROCEDIMIENTO--
	UPDATE FLOPANICMA.BONO 
	SET BONO_NRO = (10000) * @NRO_AFILIADO + @NRO_CONSULTA -- Puedo tener hasta 9999 consultas disponibles para un usuario en el sistema. (ESPECIFICAR EN ESTRATEGIA)
	WHERE ID_BONO = @ID_BONO;
	
	INSERT INTO FLOPANICMA.CONSULTA 
	(ID_TURNO,ID_BONO,BONO_NRO,REGISTRO_LLEGADA) 
	VALUES (@ID_TURNO,@ID_BONO,(SELECT BONO_NRO FROM FLOPANICMA.BONO WHERE ID_BONO = @ID_BONO),GETDATE());
	
COMMIT
GO

CREATE PROCEDURE FLOPANICMA.SP_REGISTRO_RESULTADO_ATENCION_MEDICA
@ID_CONSULTA INT,
@SINTOMA VARCHAR(255),
@DIAGNOSTICO VARCHAR(255),
@HORA_ATENCION DATETIME
AS
BEGIN
	UPDATE FLOPANICMA.CONSULTA 
	SET SINTOMA = @SINTOMA, DIAGNOSTICO = @DIAGNOSTICO, REGISTRO_ATENCION = @HORA_ATENCION
	WHERE ID_CONSULTA = @ID_CONSULTA;
END;
GO


CREATE PROCEDURE FLOPANICMA.SP_LEST_PROF_MAS_CONSULTADOS_POR_PLAN
@PLAN NUMERIC(18,0),
@ANIO INT,
@SEMESTRE INT,
@MES INT,

@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT

AS
BEGIN
	IF(@PLAN IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No ingresó un Plan, reintente.';
	END
	ELSE
	BEGIN
		IF(@SEMESTRE =1)
		BEGIN
			SELECT TOP 5 COUNT(ped.ID_TURNO) 'cantidad_turno', afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
			FROM FLOPANICMA.CONSULTA con LEFT JOIN FLOPANICMA.PEDIDO_TURNO ped ON ped.ID_TURNO=con.ID_TURNO 
			INNER JOIN FLOPANICMA.AFILIADO afi ON ped.ID_AFILIADO=afi.ID_AFILIADO
			WHERE afi.PLAN_MEDICO = @PLAN AND YEAR(ped.FECHA)=@ANIO AND con.REGISTRO_ATENCION IS NOT NULL
			AND (MONTH(ped.FECHA)<7 OR MONTH(ped.FECHA)=@MES) AND PED.FECHA<GETDATE()
			GROUP BY afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
			ORDER BY cantidad_turno DESC
		END
		ELSE
		BEGIN
			IF(@SEMESTRE =2)
			BEGIN
				SELECT TOP 5 COUNT(ped.ID_TURNO) 'cantidad_turno', afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
				FROM FLOPANICMA.CONSULTA con LEFT JOIN FLOPANICMA.PEDIDO_TURNO ped ON ped.ID_TURNO=con.ID_TURNO 
				INNER JOIN FLOPANICMA.AFILIADO afi ON ped.ID_AFILIADO=afi.ID_AFILIADO
				WHERE afi.PLAN_MEDICO = @PLAN AND YEAR(ped.FECHA)=@ANIO AND con.REGISTRO_ATENCION IS NOT NULL
				AND (MONTH(ped.FECHA)>=7 OR MONTH(ped.FECHA)=@MES) AND PED.FECHA<GETDATE()
				GROUP BY afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
				ORDER BY cantidad_turno DESC
			END
			ELSE
			BEGIN
				SELECT TOP 5 COUNT(ped.ID_TURNO) 'cantidad_turno', afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
				FROM FLOPANICMA.CONSULTA con LEFT JOIN FLOPANICMA.PEDIDO_TURNO ped ON ped.ID_TURNO=con.ID_TURNO 
				INNER JOIN FLOPANICMA.AFILIADO afi ON ped.ID_AFILIADO=afi.ID_AFILIADO
				WHERE afi.PLAN_MEDICO = @PLAN AND YEAR(ped.FECHA)=@ANIO AND con.REGISTRO_ATENCION IS NOT NULL
				AND PED.FECHA<GETDATE()
				GROUP BY afi.PLAN_MEDICO, ped.ID_PROFESIONAL, ped.ID_ESPECIALIDAD
				ORDER BY cantidad_turno DESC
			END
		END
	END
END;
GO

CREATE PROCEDURE FLOPANICMA.SP_LEST_PROF_MENOS_HS_TRABAJADAS
@ESPECIALIDAD NUMERIC(18,0),
@ANIO INT,
@SEMESTRE INT,
@MES INT,

@FLAG_ERROR BIT = 0 OUTPUT,
@MENSAJE VARCHAR(255) = '' OUTPUT

AS
BEGIN
	IF(@ESPECIALIDAD IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No ingresó una Especialidad, reintente.';
	END
	ELSE
	BEGIN
		IF(@SEMESTRE =1)
		BEGIN
			SELECT TOP 5 COUNT(DISTINCT ag.FECHA) * 0.5 'horas_trabajadas', ag.ID_PROFESIONAL FROM FLOPANICMA.AGENDA ag
			WHERE ag.ID_ESPECIALIDAD=@ESPECIALIDAD AND YEAR(ag.FECHA)=@ANIO
			AND (MONTH(ag.FECHA)<7 OR MONTH(ag.FECHA)=@MES) AND ag.FECHA < GETDATE()
			GROUP BY ag.ID_PROFESIONAL
			ORDER BY 'horas_trabajadas' ASC
		END
		ELSE
		BEGIN
			IF(@SEMESTRE =2)
			BEGIN
				SELECT TOP 5 COUNT(DISTINCT ag.FECHA) * 0.5 'horas_trabajadas', ag.ID_PROFESIONAL FROM FLOPANICMA.AGENDA ag
				WHERE ag.ID_ESPECIALIDAD=@ESPECIALIDAD AND YEAR(ag.FECHA)=@ANIO
				AND (MONTH(ag.FECHA)>=7 OR MONTH(ag.FECHA)=@MES) AND ag.FECHA < GETDATE()
				GROUP BY ag.ID_PROFESIONAL
				ORDER BY 'horas_trabajadas' ASC
			END
			ELSE
			BEGIN
				SELECT TOP 5 COUNT(DISTINCT ag.FECHA) * 0.5 'horas_trabajadas', ag.ID_PROFESIONAL FROM FLOPANICMA.AGENDA ag
				WHERE ag.ID_ESPECIALIDAD=@ESPECIALIDAD AND YEAR(ag.FECHA)=@ANIO AND ag.FECHA < GETDATE()
				GROUP BY ag.ID_PROFESIONAL
				ORDER BY 'horas_trabajadas' ASC
			END
		END
	END
END;
GO

CREATE PROCEDURE FLOPANICMA.SP_LEST_AFILIADO_MAS_BONOS_COMPRADOS
@ANIO INT,
@SEMESTRE INT,
@MES INT

AS
BEGIN
	IF(@SEMESTRE =1)
	BEGIN
		SELECT TOP 5 SUM(cbo.CANTIDAD_BONOS) 'bonos_comprados', cbo.ID_AFILIADO, 
		RIGHT(CONVERT(varchar(20), afi.NRO_AFILIADO), 2) 'terminacion'
		FROM FLOPANICMA.COMPRA_BONO cbo INNER JOIN FLOPANICMA.AFILIADO afi ON cbo.ID_AFILIADO=afi.ID_AFILIADO
		WHERE YEAR(cbo.FECHA_COMPRA)=@ANIO AND (MONTH(cbo.FECHA_COMPRA)<7 OR MONTH(cbo.FECHA_COMPRA)=@MES) AND
		cbo.FECHA_COMPRA < GETDATE()
		GROUP BY cbo.ID_AFILIADO, afi.NRO_AFILIADO
		ORDER BY 'bonos_comprados' DESC;
	END
	ELSE
	BEGIN
		IF(@SEMESTRE =2)
		BEGIN
			SELECT TOP 5 SUM(cbo.CANTIDAD_BONOS) 'bonos_comprados', cbo.ID_AFILIADO, 
			RIGHT(CONVERT(varchar(20), afi.NRO_AFILIADO), 2) 'terminacion'
			FROM FLOPANICMA.COMPRA_BONO cbo INNER JOIN FLOPANICMA.AFILIADO afi ON cbo.ID_AFILIADO=afi.ID_AFILIADO
			WHERE YEAR(cbo.FECHA_COMPRA)=@ANIO AND (MONTH(cbo.FECHA_COMPRA)>=7 OR MONTH(cbo.FECHA_COMPRA)=@MES) AND
			cbo.FECHA_COMPRA < GETDATE()
			GROUP BY cbo.ID_AFILIADO, afi.NRO_AFILIADO
			ORDER BY 'bonos_comprados' DESC;
		END
		ELSE
		BEGIN
			SELECT TOP 5 SUM(cbo.CANTIDAD_BONOS) 'bonos_comprados', cbo.ID_AFILIADO, 
			RIGHT(CONVERT(varchar(20), afi.NRO_AFILIADO), 2) 'terminacion'
			FROM FLOPANICMA.COMPRA_BONO cbo INNER JOIN FLOPANICMA.AFILIADO afi ON cbo.ID_AFILIADO=afi.ID_AFILIADO
			WHERE YEAR(cbo.FECHA_COMPRA)=@ANIO AND cbo.FECHA_COMPRA < GETDATE()
			GROUP BY cbo.ID_AFILIADO, afi.NRO_AFILIADO
			ORDER BY 'bonos_comprados' DESC;
		END
	END

END;
GO
